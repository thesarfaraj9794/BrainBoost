import 'package:flutter/material.dart';
import 'package:quiz_basic_app/pages/safe_scaffold.dart';
import 'dart:math' as math;
import 'dart:async'; // Timer ‡§ï‡•á ‡§≤‡§ø‡§è
import 'subject.dart'; // SubjectPage import

class HomePage extends StatefulWidget {
  @override
  State<HomePage> createState() => _HomePageState();
}

class _HomePageState extends State<HomePage> with TickerProviderStateMixin {
  final List<Map<String, String>> classes = [
    {"name": "Class 1", "image": "assets/images/class4.png"},
    {"name": "Class 2", "image": "assets/images/class4.png"},
    {"name": "Class 3", "image": "assets/images/class4.png"},
    {"name": "Class 4", "image": "assets/images/class4.png"},
    {"name": "Class 5", "image": "assets/images/class4.png"},
    {"name": "Class 6", "image": "assets/images/class4.png"},
  ];

  // Slider images
  final List<String> sliderImages = [
    "assets/images/class5.png",
    "assets/images/kids.png",
    "assets/images/class4.png",
    "assets/images/gk1.png",
    "assets/images/math1.png",
  ];
  late PageController _pageController;
  int _currentPage = 0;
  Timer? _sliderTimer;

  bool isDarkTheme = false;
  late AnimationController _cardAnimationController;
  late AnimationController _loadingAnimationController;
  bool _isLoading = false;
  String _selectedClass = '';

  @override
  void initState() {
    super.initState();

    // Card animation
    _cardAnimationController = AnimationController(
      vsync: this,
      duration: const Duration(milliseconds: 1500),
    );
    _cardAnimationController.forward();

    // Loading animation
    _loadingAnimationController = AnimationController(
      vsync: this,
      duration: const Duration(seconds: 4),
    );

    // PageController for slider
    _pageController = PageController(initialPage: 0);

    // üîπ Timer for auto sliding images
    _sliderTimer = Timer.periodic(const Duration(seconds: 1), (Timer timer) {
      if (_currentPage < sliderImages.length - 1) {
        _currentPage++;
      } else {
        _currentPage = 0;
      }
      if (_pageController.hasClients) {
        _pageController.animateToPage(
          _currentPage,
          duration: const Duration(milliseconds: 200),
          curve: Curves.easeInOut,
        );
      }
    });
  }

  @override
  void dispose() {
    _cardAnimationController.dispose();
    _loadingAnimationController.dispose();
    _pageController.dispose();
    _sliderTimer?.cancel();
    super.dispose();
  }

  void _onTapClass(String className) {
    setState(() {
      _isLoading = true;
      _selectedClass = className;
    });
    _loadingAnimationController.repeat();
    _navigateToSubjectPage();
  }

  _navigateToSubjectPage() async {
    await Future.delayed(const Duration(seconds: 2));

    if (mounted) {
      Navigator.push(
        context,
        PageRouteBuilder(
          pageBuilder: (context, animation, secondaryAnimation) =>
              SubjectPage(className: _selectedClass),
          transitionsBuilder: (context, animation, secondaryAnimation, child) {
            return FadeTransition(opacity: animation, child: child);
          },
        ),
      ).then((_) {
        _loadingAnimationController.stop();
        _loadingAnimationController.reset();
        setState(() {
          _isLoading = false;
        });
      });
    }
  }

  @override
  Widget build(BuildContext context) {
    final primaryColor = isDarkTheme
        ? Colors.blueGrey[900]
        : const Color(0xFF1B033A);
    final secondaryColor = isDarkTheme
        ? const Color.fromARGB(255, 164, 192, 196)
        : const Color.fromARGB(255, 219, 224, 220);
    final textColor = isDarkTheme ? Colors.white : Colors.black;
    final bgColor = isDarkTheme
        ? const Color.fromARGB(255, 245, 230, 230)
        : const Color(0xFFF0F2F5);

    if (_isLoading) {
      return Scaffold(
        backgroundColor: const Color.fromARGB(255, 27, 80, 110),
        body: Center(
          child: Column(
            mainAxisAlignment: MainAxisAlignment.center,
            children: [
              AnimatedBuilder(
                animation: _loadingAnimationController,
                builder: (context, child) {
                  return Transform.rotate(
                    angle: _loadingAnimationController.value * 2 * math.pi,
                    child: Container(
                      width: 150,
                      height: 150,
                      decoration: BoxDecoration(
                        border: Border.all(
                          color: secondaryColor!.withOpacity(0.8),
                          width: 4,
                        ),
                        borderRadius: BorderRadius.circular(20),
                        boxShadow: [
                          BoxShadow(
                            color: secondaryColor.withOpacity(0.7),
                            blurRadius: 25,
                            spreadRadius: 5,
                          ),
                          BoxShadow(
                            color: Colors.blueAccent.withOpacity(0.5),
                            blurRadius: 40,
                            spreadRadius: 10,
                          ),
                        ],
                      ),
                      child: Transform(
                        alignment: FractionalOffset.center,
                        transform: Matrix4.identity()
                          ..setEntry(3, 2, 0.002)
                          ..rotateX(
                            _loadingAnimationController.value * 2 * math.pi,
                          )
                          ..rotateY(
                            _loadingAnimationController.value * 2 * math.pi,
                          ),
                        child: Container(
                          width: 100,
                          height: 100,
                          decoration: BoxDecoration(
                            gradient: LinearGradient(
                              colors: [secondaryColor, primaryColor!],
                              begin: Alignment.topLeft,
                              end: Alignment.bottomRight,
                            ),
                            border: Border.all(color: Colors.white, width: 2),
                            boxShadow: [
                              BoxShadow(
                                color: Colors.black.withOpacity(0.3),
                                blurRadius: 10,
                                spreadRadius: 3,
                              ),
                            ],
                          ),
                          child: const Center(
                            child: Icon(
                              Icons.school,
                              size: 60,
                              color: Colors.white,
                            ),
                          ),
                        ),
                      ),
                    ),
                  );
                },
              ),
              const SizedBox(height: 30),
              Text(
                "Loading $_selectedClass Data...",
                style: const TextStyle(
                  color: Colors.white,
                  fontSize: 20,
                  fontWeight: FontWeight.bold,
                  letterSpacing: 1.5,
                ),
              ),
            ],
          ),
        ),
      );
    }

    return SafeArea(
      child: Scaffold(
        appBar: AppBar(
          //title: const Text("Sarfaraj", style: TextStyle(color: Colors.white)),
         toolbarHeight: 70,      // üîπ AppBar ‡§ï‡•Ä height ‡§¨‡§¢‡§º‡§æ ‡§¶‡•Ä
        leadingWidth: 70,       // üîπ leading area ‡§ö‡•å‡§°‡§º‡§æ ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ
        leading: SizedBox(
      height: 120,           // üîπ Logo ‡§ï‡•Ä ‡§ä‡§Å‡§ö‡§æ‡§à
      width: 100,            // üîπ Logo ‡§ï‡•Ä ‡§ö‡•å‡§°‡§º‡§æ‡§à
      child: Image.asset(
        'assets/images/slogo.png',
        fit: BoxFit.contain, // Logo ‡§ï‡•ã ‡§¨‡§ø‡§®‡§æ ‡§ï‡§ü‡•á fit ‡§ï‡§∞‡§®‡•á ‡§ï‡•á ‡§≤‡§ø‡§è
      ),
        ),
        automaticallyImplyLeading: false,
        title: null,
        centerTitle: false,
          //backgroundColor: primaryColor,
          backgroundColor: const Color.fromARGB(255, 37, 75, 107),
      
          elevation: 5,
          actions: [
            IconButton(
              icon: Icon(
                isDarkTheme ? Icons.light_mode : Icons.dark_mode,
                color: Colors.white,
              ),
              onPressed: () {
                setState(() {
                  isDarkTheme = !isDarkTheme;
                });
              },
            ),
          ],
        ),
      
        //backgroundColor: bgColor,
        //backgroundColor: const Color.fromARGB(255, 228, 211, 211),
        body: SingleChildScrollView(
          child: Column(
            children: [
              SizedBox(height: 20),
              // Welcome text
              const Padding(
                padding: EdgeInsets.all(12.0),
                child: Text(
                  "Welcome to Your Learning World Explore, Play, and Grow!‚Äù üåü",
                  style: TextStyle(
                    fontSize: 20,
                    fontWeight: FontWeight.bold,
                    color: Color.fromARGB(255, 26, 42, 112),
                    letterSpacing: 1.2,
                  ),
                ),
              ),
      
              // üîπ Sliding Images with Timer
              // SizedBox(
              //   height: 180,
              //  // width: double.infinity,
              //  width: MediaQuery.of(context).size.width,
              //   child: PageView.builder(
              //     controller: _pagzeController,
      
              //     itemCount: sliderImages.length,
              //     itemBuilder: (context, index) {
              //       return Padding(
              //         padding: const EdgeInsets.symmetric(horizontal: 12, vertical: 10),
              //         child: ClipRRect(
              //           borderRadius: BorderRadius.circular(40),
              //           child: Image.asset(
              //             sliderImages[index],
              //             width: double.infinity,
      
              //             height: 250,
              //             fit: BoxFit.contain,
      
              //           ),
              //         ),
              //       );
              //     },
              //   ),
              // ),
              // 
              SizedBox(
        height: 180,
        width: MediaQuery.of(context).size.width, // full screen width
        child: Padding(
      padding: const EdgeInsets.symmetric(
        horizontal: 12,
        vertical: 10,
      ),
      child: Container(
        decoration: BoxDecoration(
          borderRadius: BorderRadius.circular(40),
          boxShadow: [
            BoxShadow(
              color: const Color.fromARGB(
                255,
                240,
                176,
                195,
              ).withOpacity(0.25), // shadow color
              blurRadius: 5, // softness of shadow
              spreadRadius: 10, // how much it spreads
              offset: const Offset(0, 5), // shadow position
            ),
          ],
        ),
        child: ClipRRect(
          borderRadius: BorderRadius.circular(40),
          child: Image.asset(
            sliderImages[1], // üîπ ‡§∏‡§ø‡§∞‡•ç‡§´ ‡§™‡§π‡§≤‡•Ä image ‡§¶‡§ø‡§ñ‡•á‡§ó‡•Ä
            width: double.infinity,
            height: 180,
            fit: BoxFit.fill, // contain ‡§ï‡•Ä ‡§ú‡§ó‡§π cover ‡§ï‡§∞ ‡§¶‡§ø‡§Ø‡§æ
          ),
        ),
      ),
        ),
      ),
              SizedBox(height: 20,),
      
              SizedBox(
                height: 25,
      
                child: Container(
                  
                  child: Text(
                    "Start Your Learning Journey Here",
                    style: TextStyle(color: const Color.fromARGB(255, 53, 238, 28),fontSize: 18),
                  ),
                ),
              ),
      
              // GridView of classes
              Padding(
                padding: const EdgeInsets.symmetric(horizontal: 10, vertical: 10),
                child: GridView.builder(
                  physics: const NeverScrollableScrollPhysics(),
                  shrinkWrap: true,
                  itemCount: classes.length,
                  gridDelegate: const SliverGridDelegateWithFixedCrossAxisCount(
                    crossAxisCount: 2,
                    mainAxisSpacing: 15,
                    crossAxisSpacing: 10,
                    childAspectRatio: 3 / 2,
                  ),
                  itemBuilder: (context, index) {
                    var cls = classes[index];
                    return AnimatedBuilder(
                      animation: _cardAnimationController,
                      builder: (context, child) {
                        final animation = CurvedAnimation(
                          parent: _cardAnimationController,
                          curve: Interval(
                            (index / classes.length) * 0.5,
                            1.0,
                            curve: Curves.easeOut,
                          ),
                        );
                        return Transform.translate(
                          offset: Offset(0, 100 * (1 - animation.value)),
                          child: FadeTransition(
                            opacity: animation,
                            child: Transform(
                              transform: Matrix4.identity()
                                ..setEntry(3, 2, 0.001)
                                ..rotateX(0.1 * (1 - animation.value)),
                              alignment: Alignment.center,
                              child: GestureDetector(
                                onTap: () => _onTapClass(cls["name"]!),
                                child: Container(
                                  decoration: BoxDecoration(
                                    gradient: LinearGradient(
                                      colors: [secondaryColor!, primaryColor!],
                                      begin: Alignment.topLeft,
                                      end: Alignment.bottomRight,
                                    ),
                                    borderRadius: BorderRadius.circular(20),
                                    border: Border.all(
                                      color: Colors.white,
                                      width: 3,
                                    ),
                                    boxShadow: const [
                                      BoxShadow(
                                        color: Color.fromARGB(66, 221, 102, 22),
                                        blurRadius: 30,
                                        offset: Offset(4, 6),
                                      ),
                                    ],
                                  ),
                                  child: Column(
                                    mainAxisAlignment: MainAxisAlignment.center,
                                    children: [
                                      Expanded(
                                        child: Padding(
                                          padding: const EdgeInsets.all(10.0),
                                          child: Image.asset(
                                            cls["image"]!,
                                            fit: BoxFit.contain,
                                          ),
                                        ),
                                      ),
                                      const SizedBox(height: 5),
                                      Text(
                                        cls["name"]!,
                                        style: TextStyle(
                                          fontSize: 18,
                                          fontWeight: FontWeight.bold,
                                          color: textColor,
                                        ),
                                      ),
                                      const SizedBox(height: 8),
                                    ],
                                  ),
                                ),
                              ),
                            ),
                          ),
                        );
                      },
                    );
                  },
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
